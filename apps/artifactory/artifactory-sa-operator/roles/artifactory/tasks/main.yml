---
# tasks file for artifactory
- name: Create artifactory group
  uri:
    url: "{{ artifactory_url }}/{{ artifactory_group_endpoint }}/{{ license_plate }}-{{ descriptor }}"
    user: "{{ user }}"
    password: "{{ lookup('file', '/tmp/ansible-operator/password') }}"
    method: PUT
    body_format: json
    headers:
      Content-type: "application/json" 
    body: '{"name": "{{ license_plate }}-{{ descriptor }}","description" : "group for {{ license_plate }}-{{ descriptor }}","autoJoin" : false,"adminPrivileges" : false}'
    force_basic_auth: yes
    status_code: 201

- name: Create artifactory user
  uri:
    url: "{{ artifactory_url }}/{{ artifactory_user_endpoint }}/{{ license_plate }}-{{ descriptor }}"
    user: "{{ user }}"
    password: "{{ lookup('file', '/tmp/ansible-operator/password') }}"
    method: PUT
    body_format: json
    headers:
      Content-type: "application/json" 
    body: '{"name": "{{ license_plate }}-{{ descriptor }}","email" : "artifactory-ci-{{ license_plate }}-{{ descriptor }}@pathfinder.gov.bc.ca","password": "{{ lookup("password", "/tmp/passwordfile chars=ascii_letters,digits,hexdigits,punctuation") }}","admin": false,"profileUpdatable": false,"disableUIAccess" : true,"internalPasswordDisabled": false,"realm": "Internal","groups" : [ "{{ license_plate }}-{{ descriptor }}" ]}'
    force_basic_auth: yes
    status_code: 201

- name: Generate token for service account
  uri:
    url: "{{ artifactory_url }}/{{ artifactory_token_endpoint }}"
    user: "{{ user }}"
    password: "{{ lookup('file', '/tmp/ansible-operator/password') }}"
    method: POST
    headers:
      Content-type: "application/x-www-form-urlencoded"
    body_format: form-urlencoded
    body: '{"username":"{{ license_plate }}-{{ descriptor }}", "expires_in":"0", "scope":"member-of-groups:{{ license_plate }}-{{ descriptor }}", "token_type":"Bearer"}'
    force_basic_auth: yes
    #status_code: 200
  register: token_gen

- debug:
    msg: "{{ token_gen.json.access_token }}"

- set_fact:
    token: "{{ token_gen.json.access_token | b64encode }}"

- name: Create secret for token
  k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: "{{ license_plate }}-{{ descriptor }}"
        namespace: "{{ meta.namespace }}"
      type: Opaque
      data:
        password: "{{ token }}"
